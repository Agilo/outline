# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: outline_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      s3:
        image: lphoward/fake-s3
        ports:
          - 4569:4569
      redis:
        # Docker Hub image
        image: redis
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Environment variables
    env:
      NODE_ENV: test
      SECRET_KEY: e2089b086590a2e0325e0f0f2628c21a22325ffa027bad748724c71cd347b74a
      UTILS_SECRET: 10f829666a0d10b676788d40d2fc27c6bba8cc82b1e973050c04c9bdc365ef0e
      DATABASE_URL_TEST: postgres://postgres:postgres@localhost:5432/outline_test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/outline_test
      REDIS_URL: redis://localhost:6379
      URL: http://localhost:3000
      PORT: 3000
      SMTP_FROM_EMAIL: hello@example.com
      AWS_S3_UPLOAD_BUCKET_URL: http://s3:4569
      AWS_S3_UPLOAD_BUCKET_NAME: s3-bucket-name
      AWS_REGION: gh-test-1
      AWS_S3_UPLOAD_MAX_SIZE: 26214400
      AWS_S3_ACL: private
      SLACK_MESSAGE_ACTIONS: true
      SLACK_APP_ID: ${{ secrets.SLACK_APP_ID }}
      SLACK_KEY: ${{ secrets.SLACK_KEY }}
      SLACK_SECRET: ${{ secrets.SLACK_SECRET }}
      SLACK_VERIFICATION_TOKEN: ${{ secrets.SLACK_VERIFICATION_TOKEN }}
    # Steps
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: yarn install --pure-lockfile
    - run: ./node_modules/.bin/sequelize db:migrate --url $DATABASE_URL_TEST
    - run: yarn test
    - run: yarn lint
    - run: yarn flow

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    # Environment variables
    env:
      NODE_ENV: production
    # Steps
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: yarn install --pure-lockfile
    - run: yarn build
    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@v2.1.1
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        ARGS: "-rltgoDzvO --delete --exclude=.env --exclude=post-deploy"
        SOURCE: "./"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
    - name: Run Post deployment scripts
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: bash ${{ secrets.REMOTE_TARGET }}post-deploy
